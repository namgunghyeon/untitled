카우치베이스 설치

다운
https://www.couchbase.com/downloads#couchbase-server
파일 버전 couchbase-server-enterprise_4.6.0-DP-ubuntu14.04_amd64.deb

인스톨
sudo dpkg -i couchbase-server-enterprise_4.6.0-DP-ubuntu14.04_amd64.deb

접속주소
http://104.156.238.187:8091

버켓 생성
1. project_data
2. project_info

인덱스 생성
1. CREATE PRIMARY INDEX `project` ON `project_data`
2. CREATE PRIMARY INDEX `version` ON `project_data`
3. CREATE PRIMARY INDEX `type` ON `project_data`



Go 설치
https://golang.org/doc/install?download=go1.8.3.linux-amd64.tar.gz

tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz

go 설정
export GOROOT=/usr/local/go
export GOPATH=/root/untitled_api
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH



웹서버 설정
Nginx Proxy

server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;

    location / {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

SSL 인승서 발급
사용
Lets' Encrypt
wget https://dl.eff.org/certbot-auto
mv certbot-auto /usr/bin/letsencrypt
chmod 755 /usr/bin/letsencrypt
letsencrypt



mkdir -p /tmp/letsencrypt/public_html/.well-known/acme-challenge
cd /tmp/letsencrypt/public_html
printf "%s" v6jTNjl519uT9PQO0JKEOoiaY2mA8sy4wloh0HpMV7M.ez2wa0J1JFO5k_X6K6nOXT_rklKlENka8WuYTIrfVmc > .well-known/acme-challenge/v6jTNjl519uT9PQO0JKEOoiaY2mA8sy4wloh0HpMV7M
# run only once per server:
$(command -v python2 || command -v python2.7 || command -v python2.6) -c \
"import BaseHTTPServer, SimpleHTTPServer; \
s = BaseHTTPServer.HTTPServer(('', 80), SimpleHTTPServer.SimpleHTTPRequestHandler); \
s.serve_forever()"

key 저장 위치
/etc/letsencrypt/live/

Nginx https적용
server {

    listen 443 ssl;
    listen 80;

    ssl_certificate /etc/letsencrypt/live/findcharacters.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/findcharacters.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    return 301 https://$host$request_uri;

    location / {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
